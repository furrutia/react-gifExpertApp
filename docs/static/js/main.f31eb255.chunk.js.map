{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","console","log","trim","length","categories","find","c","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAmB9C,OACI,uBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBACFC,QAAQC,IAAI,gBACRN,EAAWO,OAAOC,OAAO,GACzBV,GAAc,SAAAW,GAAU,OACnBA,EAAWC,MAAM,SAAAC,GAAC,OAAIA,IAAMX,KAA5B,YAA8CS,GAA9C,CAA6DT,GAA7D,mBAA4ES,OAGrFR,EAAc,KAId,UACI,6BAAKD,IACL,uBACIY,KAAK,OACLC,MAAOb,EACPc,SArBc,SAACX,GACvBF,EAAcE,EAAEY,OAAOF,c,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAKA,EAAL,WCFCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEZlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAiBtC,OAVAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEGqB,EDd0BK,CAAc1B,GAAlCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAErB,OACI,eAAC,WAAD,WACI,oBAAIJ,UAAU,wCAAd,SAAwDhB,IAEtDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADAA,EAAIC,aEwBtBgB,EArCM,SAAC,GAAuB,EAArB/B,MAAsB,IAAD,EAILd,mBAAS,CAAE,cAJN,mBAIlCU,EAJkC,KAItBX,EAJsB,KAWzC,OACI,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAEQW,EAAWiB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCrBjC4B,IAASC,OACP,cAAC,EAAD,CAAcjC,MAAM,iBACpBkC,SAASC,eAAe,W","file":"static/js/main.f31eb255.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (e)=>{\r\n        setinputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log('Submit Hecho');\r\n        if (inputValue.trim().length>2) {\r\n            setCategories(categories => \r\n                (categories.find( c => c === inputValue) ? [...categories] : [inputValue, ...categories])\r\n            );\r\n        };\r\n        setinputValue(\"\");\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <h1>{inputValue}</h1>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n","export const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=Xd7KK2t2UxLoOYs0200DOFecnBIVM5LE`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src={url} alt={title}/>\r\n            <p> {title} </p>\r\n        </div>\r\n    );\r\n};\r\n","import React, { Fragment } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <Fragment>\r\n            <h3 className=\"animate__animated animate__fadeInDown\">{ category }</h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key={img.id} \r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            });\r\n    }, [category])\r\n\r\n    return state;\r\n\r\n}","import React, { Fragment, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = ({ value='futbol' }) => {\r\n\r\n    // const categories = [ 'One Punch', 'Samurai X', 'Dragon Ball'];\r\n\r\n    const [categories, setCategories] = useState([ 'One Punch']);\r\n\r\n    // const handleAdd = (categorie) => {\r\n    //     //setCategories([...categories, \"CategoriaNueva\"]);\r\n    //     setCategories(categories => [...categories, \"CategoriaNueva\"]);\r\n    // };\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n\r\n            {/* <button onClick={ handleAdd }>Agregar</button> */}\r\n            <ol>\r\n                { \r\n                    categories.map( category => \r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category} \r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n        </Fragment>\r\n    );\r\n\r\n};\r\n\r\nGifExpertApp.propTypes = {\r\n    value: PropTypes.string.isRequired\r\n};\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp value='Aguante Boca' />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}